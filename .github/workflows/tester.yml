# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  
  #pull_request:
    #branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]

env:
  AWS_REGION: 'ap-southeast-2'




# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          
  get-ci-env:
    runs-on: ubuntu-latest
    outputs:
      ci_env: ${{ steps.determine-env.outputs.ci_env }}
    steps:
    - id: determine-env
      run: |
        if [[ ${{ github.ref_name }} == "main" ]]
        then
          # in future include ${{ github.ref }} == refs/tags/prd-* for prd deployment using tags (e.g. calver)
          echo "ci_env=prd" >> $GITHUB_OUTPUT
        else
          echo "ci_env=dev" >> $GITHUB_OUTPUT
        fi
        
        
  create-virtualenv:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Restore venv
      uses: syphar/restore-virtualenv@v1
      id: cache-virtualenv

    - uses: syphar/restore-pip-download-cache@v1
      if: steps.cache-virtualenv.outputs.cache-hit != 'true'

    - run: pip install .
      if: steps.cache-virtualenv.outputs.cache-hit != 'true'

  changes:
    name: Code & dependency changes
    runs-on: ubuntu-latest
    outputs:
      prefect_flows: ${{ steps.filter.outputs.flows_files }}
      prefect_flows_changed: ${{ steps.filter.outputs.flows }}
      code_dependencies_changed: ${{ steps.filter.outputs.code }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Generate Markdown Summary
        run: echo "Starting CI/CD for flows and dependencies added/modified with commit ${GITHUB_SHA::7}" >> $GITHUB_STEP_SUMMARY
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          list-files: json
          base: ${{ github.ref }}
          filters: |
            flows:
              - added|modified: 'flows/*.py'
            #code:
              #- added|modified: 'setup.py'
              #- added|modified: 'requirements/prod.txt'
              #- added|modified: 'Dockerfile'
              #- added|modified: 'docker/*'
      - name: Generate Markdown Summary
        run: | 
          echo Flows: ${{ steps.filter.outputs.flows_files }} >> $GITHUB_STEP_SUMMARY
          echo Code dependency changes: ${{ steps.filter.outputs.code_files }} >> $GITHUB_STEP_SUMMARY
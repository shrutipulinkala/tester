# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  
  #pull_request:
    #branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]

env:
  AWS_REGION: 'ap-southeast-2'
  PREFECT_API_KEY: 'pnu_RZCZPh0lnEmxbFn10lQbo4ke2Apm6g1ZXf8S'
  PREFECT_API_URL: 'https://api.prefect.cloud/api'
  CI_ROLE_ARN_GITHUB: 'arn:aws:iam::701377985539:role/GithubCiRole'
  




# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          
  get-ci-env:
    runs-on: ubuntu-latest
    outputs:
      ci_env: ${{ steps.determine-env.outputs.ci_env }}
    steps:
    - id: determine-env
      run: |
        if [[ ${{ github.ref_name }} == "main" ]]
        then
          # in future include ${{ github.ref }} == refs/tags/prd-* for prd deployment using tags (e.g. calver)
          echo "ci_env=dev" >> $GITHUB_OUTPUT
        else
          echo "ci_env=dev" >> $GITHUB_OUTPUT
        fi
        
        
  create-virtualenv:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Restore venv
      uses: syphar/restore-virtualenv@v1
      id: cache-virtualenv

    - uses: syphar/restore-pip-download-cache@v1
      if: steps.cache-virtualenv.outputs.cache-hit != 'true'

    - run: pip install .
      if: steps.cache-virtualenv.outputs.cache-hit != 'true'

  changes:
    name: Code & dependency changes
    runs-on: ubuntu-latest
    outputs:
      prefect_flows: ${{ steps.filter.outputs.flows_files }}
      prefect_flows_changed: ${{ steps.filter.outputs.flows }}
      code_dependencies_changed: ${{ steps.filter.outputs.code }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Generate Markdown Summary
        run: echo "Starting CI/CD for flows and dependencies added/modified with commit ${GITHUB_SHA::7}" >> $GITHUB_STEP_SUMMARY
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          list-files: json
          base: ${{ github.ref }}
          filters: |
            flows:
              - added|modified: 'flows/*.py'
           
      - name: Generate Markdown Summary
        run: | 
          echo Flows: ${{ steps.filter.outputs.flows_files }} >> $GITHUB_STEP_SUMMARY
          echo Code dependency changes: ${{ steps.filter.outputs.code_files }} >> $GITHUB_STEP_SUMMARY
          
          
  display-variables:
    needs: [get-ci-env, create-virtualenv, changes]
    runs-on: ubuntu-latest
    steps:
    - name: Use variables
      run: |
        echo "PREFECT_API_KEY variable : ${{ secrets.PREFECT_API_KEY }}"
        echo "PREFECT_API_URL variable : ${{ secrets.PREFECT_API_URL }}"
        echo "CI_ROLE_ARN_GITHUB variable : ${{ vars.CI_ROLE_ARN_GITHUB }}"
        echo "PREFECT_CI_USER_KEY variable : ${{ secrets.PREFECT_CI_USER_KEY }}"
        echo "PREFECT_CI_USER_SECRET variable : ${{ secrets.PREFECT_CI_USER_SECRET }}"
        echo "github ref varibale : ${{ github.ref_name }}"
        
        
  maintenance:
    needs: [get-ci-env, create-virtualenv, changes]
    environment:
      name: ${{ needs.get-ci-env.outputs.ci_env }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    if: ${{ needs.changes.outputs.prefect_flows_changed == 'true' }}
    outputs:
      flows-to-deploy: ${{ steps.get-flows-with-deployments.outputs.flows_to_deploy }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Restore venv
      uses: syphar/restore-virtualenv@v1
      id: cache-virtualenv

    - name: Prefect Cloud login
      run: |
        prefect config set PREFECT_API_KEY=${{ env.PREFECT_API_KEY }}
        prefect config set PREFECT_API_URL=${{ env.PREFECT_API_URL }} 

    - name: Configure AWS credentials by assuming role
      uses: aws-actions/configure-aws-credentials@v2
      with:
        #role-to-assume: ${{ vars.CI_ROLE_ARN_GITHUB }}
        role-to-assume: ${{ env.CI_ROLE_ARN_GITHUB }}
        aws-region: ${{ env.AWS_REGION }}
        mask-aws-account-id: false

    - name: set PYTHONPATH; S3_BLOCK_NAME; S3_STORAGE_BUCKET_PATH
      env:
        BUCKET_NAME: kp-dataservices-prefect2-${{ needs.get-ci-env.outputs.ci_env }}
        S3_BLOCK_NAME: ${{ github.ref_name }}-flows-storage
        # A more descriptive naming convention would be nice, e.g. flows-storage-branch=${{ github.ref_name }}
      run: |
        echo "PYTHONPATH=$GITHUB_WORKSPACE" >> $GITHUB_ENV
        echo "S3_STORAGE_BUCKET_PATH=$BUCKET_NAME/$S3_BLOCK_NAME" >> $GITHUB_ENV
        echo "S3_BLOCK_NAME=$S3_BLOCK_NAME" >> $GITHUB_ENV
        echo $GITHUB_ENV
    
        
        
 